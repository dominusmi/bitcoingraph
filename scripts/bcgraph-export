#!/usr/bin/env python

import argparse
import os
import sys

if os.environ.get("BCG_LOGLEVEL") is None:
    os.environ["BCG_LOGLEVEL"] = "WARN"

from bitcoingraph.bitcoingraph import BitcoinGraph
from bitcoingraph.bitcoind import SSHTunnel


def progress(p=0):
    p = int(p * 100)
    sys.stdout.write('\rProgress: {}%'.format(p))
    sys.stdout.flush()

parser = argparse.ArgumentParser(
    description='Export transactions from blockchain')
parser.add_argument('startheight', type=int,
                    help='Start block height')
parser.add_argument('endheight', type=int,
                    help='End block height')
parser.add_argument('-o', '--output_path', type=str,
                    help='Output path')
parser.add_argument("-u", "--user", required=True,
                    help="Bitcoin Core RPC username")
parser.add_argument("-p", "--password", required=True,
                    help="Bitcoin Core RPC password")
parser.add_argument("-H", "--host", default="localhost",
                    help="Bitcoin Core host")
parser.add_argument("-P", "--port", default=8332, type=int,
                    help="Bitcoin Core port")
parser.add_argument("--ssh",
                    help="Path containing paramiko ssh configs in json format")
parser.add_argument("--cache", type=str,
                    help="Directory path. Uses the directory to save/fetch already downloaded blocks. Useful only for "
                         "development/debugging purposes")
parser.add_argument("--timeout", type=int,
                    help="Bitcoin Core request timeout")
parser.add_argument("--sort-only", default=False, action="store_true",
                    help="Skip processing and only sort output csv files")


if __name__ == "__main__":
    if len(sys.argv) <= 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()

    ssh_tunnel = args.ssh
    if ssh_tunnel:
        ssh_tunnel = SSHTunnel.from_config_file(args.ssh)

    bcgraph = BitcoinGraph(
        blockchain={'host': args.host, 'port': args.port,
                    'rpc_user': args.user, 'rpc_pass': args.password,
                    'method': 'REST', 'cache_path': args.cache, 'ssh_tunnel': ssh_tunnel,
                    'timeout': args.timeout})


    bcgraph.export(
        args.startheight,
        args.endheight,
        args.output_path,
        progress,
        args.sort_only)
